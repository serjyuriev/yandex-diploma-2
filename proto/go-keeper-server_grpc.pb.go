// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: proto/go-keeper-server.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GokeeperClient is the client API for Gokeeper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GokeeperClient interface {
	SignUpUser(ctx context.Context, in *SignUpUserRequest, opts ...grpc.CallOption) (*SignUpUserResponse, error)
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
	UpdateItems(ctx context.Context, in *UpdateItemsRequest, opts ...grpc.CallOption) (*UpdateItemsResponse, error)
	Sync(ctx context.Context, opts ...grpc.CallOption) (Gokeeper_SyncClient, error)
	AddLoginItem(ctx context.Context, in *AddLoginItemRequest, opts ...grpc.CallOption) (*AddLoginItemResponse, error)
	AddBankCardItem(ctx context.Context, in *AddBankCardItemRequest, opts ...grpc.CallOption) (*AddBankCardItemResponse, error)
	AddTextItem(ctx context.Context, in *AddTextItemRequest, opts ...grpc.CallOption) (*AddTextItemResponse, error)
	AddBinaryItem(ctx context.Context, in *AddBinaryItemRequest, opts ...grpc.CallOption) (*AddBinaryItemResponse, error)
}

type gokeeperClient struct {
	cc grpc.ClientConnInterface
}

func NewGokeeperClient(cc grpc.ClientConnInterface) GokeeperClient {
	return &gokeeperClient{cc}
}

func (c *gokeeperClient) SignUpUser(ctx context.Context, in *SignUpUserRequest, opts ...grpc.CallOption) (*SignUpUserResponse, error) {
	out := new(SignUpUserResponse)
	err := c.cc.Invoke(ctx, "/proto.server.Gokeeper/SignUpUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gokeeperClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	out := new(LoginUserResponse)
	err := c.cc.Invoke(ctx, "/proto.server.Gokeeper/LoginUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gokeeperClient) UpdateItems(ctx context.Context, in *UpdateItemsRequest, opts ...grpc.CallOption) (*UpdateItemsResponse, error) {
	out := new(UpdateItemsResponse)
	err := c.cc.Invoke(ctx, "/proto.server.Gokeeper/UpdateItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gokeeperClient) Sync(ctx context.Context, opts ...grpc.CallOption) (Gokeeper_SyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gokeeper_ServiceDesc.Streams[0], "/proto.server.Gokeeper/Sync", opts...)
	if err != nil {
		return nil, err
	}
	x := &gokeeperSyncClient{stream}
	return x, nil
}

type Gokeeper_SyncClient interface {
	Send(*SyncRequest) error
	Recv() (*SyncResponse, error)
	grpc.ClientStream
}

type gokeeperSyncClient struct {
	grpc.ClientStream
}

func (x *gokeeperSyncClient) Send(m *SyncRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gokeeperSyncClient) Recv() (*SyncResponse, error) {
	m := new(SyncResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gokeeperClient) AddLoginItem(ctx context.Context, in *AddLoginItemRequest, opts ...grpc.CallOption) (*AddLoginItemResponse, error) {
	out := new(AddLoginItemResponse)
	err := c.cc.Invoke(ctx, "/proto.server.Gokeeper/AddLoginItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gokeeperClient) AddBankCardItem(ctx context.Context, in *AddBankCardItemRequest, opts ...grpc.CallOption) (*AddBankCardItemResponse, error) {
	out := new(AddBankCardItemResponse)
	err := c.cc.Invoke(ctx, "/proto.server.Gokeeper/AddBankCardItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gokeeperClient) AddTextItem(ctx context.Context, in *AddTextItemRequest, opts ...grpc.CallOption) (*AddTextItemResponse, error) {
	out := new(AddTextItemResponse)
	err := c.cc.Invoke(ctx, "/proto.server.Gokeeper/AddTextItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gokeeperClient) AddBinaryItem(ctx context.Context, in *AddBinaryItemRequest, opts ...grpc.CallOption) (*AddBinaryItemResponse, error) {
	out := new(AddBinaryItemResponse)
	err := c.cc.Invoke(ctx, "/proto.server.Gokeeper/AddBinaryItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GokeeperServer is the server API for Gokeeper service.
// All implementations must embed UnimplementedGokeeperServer
// for forward compatibility
type GokeeperServer interface {
	SignUpUser(context.Context, *SignUpUserRequest) (*SignUpUserResponse, error)
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error)
	UpdateItems(context.Context, *UpdateItemsRequest) (*UpdateItemsResponse, error)
	Sync(Gokeeper_SyncServer) error
	AddLoginItem(context.Context, *AddLoginItemRequest) (*AddLoginItemResponse, error)
	AddBankCardItem(context.Context, *AddBankCardItemRequest) (*AddBankCardItemResponse, error)
	AddTextItem(context.Context, *AddTextItemRequest) (*AddTextItemResponse, error)
	AddBinaryItem(context.Context, *AddBinaryItemRequest) (*AddBinaryItemResponse, error)
	mustEmbedUnimplementedGokeeperServer()
}

// UnimplementedGokeeperServer must be embedded to have forward compatible implementations.
type UnimplementedGokeeperServer struct {
}

func (UnimplementedGokeeperServer) SignUpUser(context.Context, *SignUpUserRequest) (*SignUpUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUpUser not implemented")
}
func (UnimplementedGokeeperServer) LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedGokeeperServer) UpdateItems(context.Context, *UpdateItemsRequest) (*UpdateItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItems not implemented")
}
func (UnimplementedGokeeperServer) Sync(Gokeeper_SyncServer) error {
	return status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedGokeeperServer) AddLoginItem(context.Context, *AddLoginItemRequest) (*AddLoginItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLoginItem not implemented")
}
func (UnimplementedGokeeperServer) AddBankCardItem(context.Context, *AddBankCardItemRequest) (*AddBankCardItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBankCardItem not implemented")
}
func (UnimplementedGokeeperServer) AddTextItem(context.Context, *AddTextItemRequest) (*AddTextItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTextItem not implemented")
}
func (UnimplementedGokeeperServer) AddBinaryItem(context.Context, *AddBinaryItemRequest) (*AddBinaryItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBinaryItem not implemented")
}
func (UnimplementedGokeeperServer) mustEmbedUnimplementedGokeeperServer() {}

// UnsafeGokeeperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GokeeperServer will
// result in compilation errors.
type UnsafeGokeeperServer interface {
	mustEmbedUnimplementedGokeeperServer()
}

func RegisterGokeeperServer(s grpc.ServiceRegistrar, srv GokeeperServer) {
	s.RegisterService(&Gokeeper_ServiceDesc, srv)
}

func _Gokeeper_SignUpUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GokeeperServer).SignUpUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.server.Gokeeper/SignUpUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GokeeperServer).SignUpUser(ctx, req.(*SignUpUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gokeeper_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GokeeperServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.server.Gokeeper/LoginUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GokeeperServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gokeeper_UpdateItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GokeeperServer).UpdateItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.server.Gokeeper/UpdateItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GokeeperServer).UpdateItems(ctx, req.(*UpdateItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gokeeper_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GokeeperServer).Sync(&gokeeperSyncServer{stream})
}

type Gokeeper_SyncServer interface {
	Send(*SyncResponse) error
	Recv() (*SyncRequest, error)
	grpc.ServerStream
}

type gokeeperSyncServer struct {
	grpc.ServerStream
}

func (x *gokeeperSyncServer) Send(m *SyncResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gokeeperSyncServer) Recv() (*SyncRequest, error) {
	m := new(SyncRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Gokeeper_AddLoginItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLoginItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GokeeperServer).AddLoginItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.server.Gokeeper/AddLoginItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GokeeperServer).AddLoginItem(ctx, req.(*AddLoginItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gokeeper_AddBankCardItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBankCardItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GokeeperServer).AddBankCardItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.server.Gokeeper/AddBankCardItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GokeeperServer).AddBankCardItem(ctx, req.(*AddBankCardItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gokeeper_AddTextItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTextItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GokeeperServer).AddTextItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.server.Gokeeper/AddTextItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GokeeperServer).AddTextItem(ctx, req.(*AddTextItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gokeeper_AddBinaryItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBinaryItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GokeeperServer).AddBinaryItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.server.Gokeeper/AddBinaryItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GokeeperServer).AddBinaryItem(ctx, req.(*AddBinaryItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gokeeper_ServiceDesc is the grpc.ServiceDesc for Gokeeper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gokeeper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.server.Gokeeper",
	HandlerType: (*GokeeperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUpUser",
			Handler:    _Gokeeper_SignUpUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _Gokeeper_LoginUser_Handler,
		},
		{
			MethodName: "UpdateItems",
			Handler:    _Gokeeper_UpdateItems_Handler,
		},
		{
			MethodName: "AddLoginItem",
			Handler:    _Gokeeper_AddLoginItem_Handler,
		},
		{
			MethodName: "AddBankCardItem",
			Handler:    _Gokeeper_AddBankCardItem_Handler,
		},
		{
			MethodName: "AddTextItem",
			Handler:    _Gokeeper_AddTextItem_Handler,
		},
		{
			MethodName: "AddBinaryItem",
			Handler:    _Gokeeper_AddBinaryItem_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sync",
			Handler:       _Gokeeper_Sync_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/go-keeper-server.proto",
}
